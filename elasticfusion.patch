diff --git a/Core/src/CMakeLists.txt b/Core/src/CMakeLists.txt
index a93951a..6ae5ee6 100644
--- a/Core/src/CMakeLists.txt
+++ b/Core/src/CMakeLists.txt
@@ -10,7 +10,6 @@ set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}")
 find_package(Pangolin 0.1 REQUIRED)
 find_package(CUDA REQUIRED)
 find_package(SuiteSparse REQUIRED)
-set(CUDA_HOST_COMPILER gcc-5)
 
 set(efusion_SHADER_DIR "${CMAKE_CURRENT_SOURCE_DIR}/Shaders" CACHE PATH "Where the shaders live")
 message(${efusion_SHADER_DIR})
@@ -29,7 +28,7 @@ if(WIN32)
   file(GLOB containers_hdrs Cuda/containers/*.hpp)
 endif()
 
-set(CUDA_ARCH_BIN "30 35 50 52 61" CACHE STRING "Specify 'real' GPU arch to build binaries for, BIN(PTX) format is supported. Example: 1.3 2.1(1.3) or 13 21(13)")
+set(CUDA_ARCH_BIN "35 50 52 61" CACHE STRING "Specify 'real' GPU arch to build binaries for, BIN(PTX) format is supported. Example: 1.3 2.1(1.3) or 13 21(13)")
 set(CUDA_ARCH_PTX "" CACHE STRING "Specify 'virtual' PTX arch to build PTX intermediate code for. Example: 1.0 1.2 or 10 12")              
 
 SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR})
@@ -74,6 +73,7 @@ target_include_directories(efusion PUBLIC
                            ${CUDA_INCLUDE_DIRS}
                            ${EIGEN_INCLUDE_DIRS}
                            ${SUITESPARSE_INCLUDE_DIRS}
+                           ${CHOLMOD_INCLUDE_DIR}
 )
 
 target_link_libraries(efusion PUBLIC
@@ -81,7 +81,8 @@ target_link_libraries(efusion PUBLIC
                       ${Pangolin_LIBRARIES}
                       ${CUDA_LIBRARIES}
                       ${SUITESPARSE_LIBRARIES}
-					  ${EXTRA_WINDOWS_LIBS}
+                      ${CHOLMOD_LIBRARIES}
+                      ${EXTRA_WINDOWS_LIBS}
 ) 
 
 INSTALL(TARGETS efusion
diff --git a/Core/src/GlobalModel.cpp b/Core/src/GlobalModel.cpp
index 1ea9b41..df2b4e6 100644
--- a/Core/src/GlobalModel.cpp
+++ b/Core/src/GlobalModel.cpp
@@ -17,7 +17,7 @@
  */
 
 #include "GlobalModel.h"
-#include <GL/glext.h>
+//#include <GL/glext.h>
 
 const int GlobalModel::TEXTURE_DIMENSION = 3072;
 const int GlobalModel::MAX_VERTICES = GlobalModel::TEXTURE_DIMENSION * GlobalModel::TEXTURE_DIMENSION;
